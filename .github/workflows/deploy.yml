# 워크 플로우 이름
name: Java CI with Gradle


# 워크 플로우가 언제 실행 될지를 정한다.
on:
  push:
    branches: [ "feature/GOORM-6-github-actions" ]
  pull_request:
    branches: [ "feature/GOORM-6-github-actions" ]


# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read


# 워크플로우에서 할 작업 정의한다.
jobs:

  # 작업 환경 = 우분투 최신 버전
  build:
    runs-on: ubuntu-latest

    # 깃허브에서 제공하는 checkout 엑션 사용
    steps:
      - uses: actions/checkout@v3

      # JDK 17 설정한당
      # temurin = Adoptium에서 제공하는 JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle wrapper 파일에 실행 권한을 부여
      # gradle wrapper = 개발자가 특정 버전의 Gradle을 미리 설치하지 않고도 Gradle 빌드를 실행할 수 있게 해주는 편리한 도구
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build -x test

      - name: Verify Build Output
        run: ls build/libs/
      # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: team49Server
          path: build/libs/team49-0.0.1-SNAPSHOT.jar
      - name: Verify Downloaded Artifact
        run: ls build/libs/

  # 배포 **
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: team49Server
          path: build/libs/

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_PEM_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          echo "Private key file created and permissions set."

          # 파일 복사 로그
          echo "Uploading JAR file to EC2 instance..."
          scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/team49-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/team49-0.0.1-SNAPSHOT.jar
          echo "JAR file uploaded to EC2."

          # SSH 연결 시작
          echo "Starting SSH session on EC2..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF

            # 환경 변수 설정 로그
            echo "Setting environment variables on EC2..."
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export REST_API_KEY=${{ secrets.REST_API_KEY }}
            echo "Environment variables set."

            # 기존 Java 프로세스 종료 로그
            echo "Stopping existing Java processes (if any)..."
            pgrep java | xargs kill -9 || true
            echo "Existing Java processes stopped."

            # 애플리케이션 실행 로그
            echo "Starting application..."
            nohup java -jar /home/${{ secrets.EC2_USER }}/team49-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
            echo "Application started."
          EOF

          # 로컬 SSH 키 삭제 로그
          echo "Cleaning up private key..."
          rm -f private_key.pem
          echo "Private key deleted."
